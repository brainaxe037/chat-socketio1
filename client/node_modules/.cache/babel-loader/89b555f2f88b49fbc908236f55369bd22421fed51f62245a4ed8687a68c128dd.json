{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\H45T3R\\\\Desktop\\\\chat-socketio\\\\client\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport io from 'socket.io-client';\nimport { useState } from \"react\";\nimport Chat from './Chat';\n\n//connecting frontend to backend\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io.connect(\"http://localhost:3001\");\n\n//now we have to establish a connection with our socket.io server.\n//Whenever someone enters a website, it should console.log the id of the user in our backend\nfunction App() {\n  _s();\n  const [username, setUsername] = useState(\"\");\n  const [room, setRoom] = useState(\"\");\n\n  //function to join a room when you click on Join A Room button\n  //this function will primarily establish a connection between the user who logged in and the socket io room\n  //that they want to enter\n  const joinRoom = () => {\n    console.log(`this is ${room}`);\n    if (username !== \"\" && room !== \"\") {\n      // room will be received in the backend as \"data\" which we passed in the callback function\n      socket.emit(\"join_room\", room);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Join A Chat\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"John...\",\n      onChange: event => {\n        setUsername(event.target.value);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Room ID...\",\n      onChange: event => {\n        setRoom(event.target.value);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: joinRoom,\n      children: \"Join A Room\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Chat, {\n      socket: socket,\n      username: username,\n      room: room\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"EvQ3yTzpkY6BE+Nt7fmIxnkn+xo=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["io","useState","Chat","jsxDEV","_jsxDEV","socket","connect","App","_s","username","setUsername","room","setRoom","joinRoom","console","log","emit","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","onChange","event","target","value","onClick","_c","$RefreshReg$"],"sources":["C:/Users/H45T3R/Desktop/chat-socketio/client/src/App.js"],"sourcesContent":["import './App.css';\nimport io from 'socket.io-client';\nimport {useState} from \"react\";\nimport Chat from './Chat';\n\n//connecting frontend to backend\nconst socket = io.connect(\"http://localhost:3001\");\n\n//now we have to establish a connection with our socket.io server.\n//Whenever someone enters a website, it should console.log the id of the user in our backend\nfunction App() {\n  const [username, setUsername] = useState(\"\");\n  const [room, setRoom] = useState(\"\");\n\n  //function to join a room when you click on Join A Room button\n  //this function will primarily establish a connection between the user who logged in and the socket io room\n  //that they want to enter\n  const joinRoom = () => {\n    console.log(`this is ${room}`);\n    if(username !== \"\" && room !== \"\"){\n      // room will be received in the backend as \"data\" which we passed in the callback function\n      socket.emit(\"join_room\", room);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      \n\n      <h3>Join A Chat</h3>\n      {\n        // in order to have a chat between 2 people, we want to make sure that they are in the same\n        // room, and a room ,in socket.io,is basically where you are broadcasting your data. So if i send a \n        // message to a room which has a specific id, only the people who have joined the room will see that\n        // message.\n      }\n      <input \n        type=\"text\" \n        placeholder=\"John...\" \n        onChange={(event) => {\n          setUsername(event.target.value);\n        }}>\n      </input>\n      <input \n        type=\"text\" \n        placeholder=\"Room ID...\"\n        onChange={(event) => {\n          setRoom(event.target.value);\n        }}>\n      </input>\n      <button onClick={joinRoom}>Join A Room</button>\n      <Chat socket = {socket} username = {username} room = {room}/>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAO,WAAW;AAClB,OAAOA,EAAE,MAAM,kBAAkB;AACjC,SAAQC,QAAQ,QAAO,OAAO;AAC9B,OAAOC,IAAI,MAAM,QAAQ;;AAEzB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,MAAM,GAAGL,EAAE,CAACM,OAAO,CAAC,uBAAuB,CAAC;;AAElD;AACA;AACA,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACU,IAAI,EAAEC,OAAO,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;;EAEpC;EACA;EACA;EACA,MAAMY,QAAQ,GAAGA,CAAA,KAAM;IACrBC,OAAO,CAACC,GAAG,CAAE,WAAUJ,IAAK,EAAC,CAAC;IAC9B,IAAGF,QAAQ,KAAK,EAAE,IAAIE,IAAI,KAAK,EAAE,EAAC;MAChC;MACAN,MAAM,CAACW,IAAI,CAAC,WAAW,EAAEL,IAAI,CAAC;IAChC;EACF,CAAC;EAED,oBACEP,OAAA;IAAKa,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAGlBd,OAAA;MAAAc,QAAA,EAAI;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAOpBlB,OAAA;MACEmB,IAAI,EAAC,MAAM;MACXC,WAAW,EAAC,SAAS;MACrBC,QAAQ,EAAGC,KAAK,IAAK;QACnBhB,WAAW,CAACgB,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;MACjC;IAAE;MAAAT,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACG,CAAC,eACRlB,OAAA;MACEmB,IAAI,EAAC,MAAM;MACXC,WAAW,EAAC,YAAY;MACxBC,QAAQ,EAAGC,KAAK,IAAK;QACnBd,OAAO,CAACc,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;MAC7B;IAAE;MAAAT,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACG,CAAC,eACRlB,OAAA;MAAQyB,OAAO,EAAEhB,QAAS;MAAAK,QAAA,EAAC;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAC/ClB,OAAA,CAACF,IAAI;MAACG,MAAM,EAAIA,MAAO;MAACI,QAAQ,EAAIA,QAAS;MAACE,IAAI,EAAIA;IAAK;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC1D,CAAC;AAEV;AAACd,EAAA,CA5CQD,GAAG;AAAAuB,EAAA,GAAHvB,GAAG;AA8CZ,eAAeA,GAAG;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}