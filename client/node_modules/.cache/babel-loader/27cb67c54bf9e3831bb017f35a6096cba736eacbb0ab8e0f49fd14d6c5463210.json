{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\H45T3R\\\\Desktop\\\\chat-socketio\\\\client\\\\src\\\\Chat.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport { useState } from \"react\";\nimport ScrollToBottom from \"react-scroll-to-bottom\";\n\n//in this component we will be sending and receiving messages through socket.io, so we do\n//need to pass the socket variable that we created in the App.js in frontend as props to our chat component, and also\n//we need to keep track of the username of user and the room of the user\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chat = _ref => {\n  _s();\n  let {\n    socket,\n    username,\n    room\n  } = _ref;\n  const [currentMessage, setCurrentMessage] = useState(\"\");\n\n  //this state will represent list of messages coming into your chat\n  const [messageList, setMessageList] = useState([]);\n\n  //this function will allow us to send messages through socket server.\n  //this function is asynchronous so that we actually wait for the message to be sent\n  const sendMessage = async () => {\n    if (currentMessage !== \"\") {\n      // when we send a message ,we want several things with it,like the time, and the user who sent it,\n      // so this object messageData will store that.\n      // And we will send this object to our socket server\n      const messageData = {\n        room: room,\n        author: username,\n        message: currentMessage,\n        time: new Date(Date.now()).getHours() + \":\" + new Date(Date.now()).getMinutes()\n      };\n      await socket.emit(\"send_message\", messageData);\n      setMessageList(list => [...list, messageData]);\n      setCurrentMessage(\"\");\n    }\n  };\n\n  //useEffect will listen whenever there are changes to our socket,i.e.,it is going to listen every time it receives another message.\n  //the second parameter in useEffect is \"socket\", so whenever it changes it should call the fucntion in first parameter.\n  //this is the frontend listening to the backend\n  useEffect(() => {\n    socket.on(\"receive_message\", data => {\n      //the \"list\" in the parantheses is the previous current message list, and we are addding new message \"data\" to it\n      setMessageList(list => [...list, data]);\n    });\n    //this return statement is added so that the sent message is not displayed twice in the receivers box,it is a cleanup function.\n    return () => socket.removeListener('receive_message');\n  }, [socket]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-window\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-header\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Live Chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 15\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-body\",\n      children: /*#__PURE__*/_jsxDEV(ScrollToBottom, {\n        className: \"message-container\",\n        children: messageList.map(messageContent => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message\",\n            id: username === messageContent.author ? \"you\" : \"other\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"message-content\",\n                children: /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: messageContent.message\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 63,\n                  columnNumber: 33\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 62,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"message-meta\",\n                children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                  id: \"time\",\n                  children: messageContent.time\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 66,\n                  columnNumber: 33\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  id: \"author\",\n                  children: messageContent.author\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 67,\n                  columnNumber: 33\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 65,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 61,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 21\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-footer\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: currentMessage,\n        placeholder: \"Hey...\",\n        onChange: event => {\n          setCurrentMessage(event.target.value);\n        },\n        onKeyPress: event => {\n          event.key === \"Enter\" && sendMessage();\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendMessage,\n        children: \"\\u25BA\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 7\n  }, this);\n};\n_s(Chat, \"gDKz+24cg75HOdfXSFFmVy0ndt0=\");\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useEffect","useState","ScrollToBottom","jsxDEV","_jsxDEV","Chat","_ref","_s","socket","username","room","currentMessage","setCurrentMessage","messageList","setMessageList","sendMessage","messageData","author","message","time","Date","now","getHours","getMinutes","emit","list","on","data","removeListener","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","messageContent","id","type","value","placeholder","onChange","event","target","onKeyPress","key","onClick","_c","$RefreshReg$"],"sources":["C:/Users/H45T3R/Desktop/chat-socketio/client/src/Chat.js"],"sourcesContent":["import React, { useEffect } from 'react'\r\nimport {useState} from \"react\";\r\nimport ScrollToBottom from \"react-scroll-to-bottom\";\r\n\r\n\r\n//in this component we will be sending and receiving messages through socket.io, so we do\r\n//need to pass the socket variable that we created in the App.js in frontend as props to our chat component, and also\r\n//we need to keep track of the username of user and the room of the user\r\n\r\nconst Chat = ({socket, username, room}) => {\r\n    const [currentMessage, setCurrentMessage] = useState(\"\");\r\n\r\n    //this state will represent list of messages coming into your chat\r\n    const [messageList, setMessageList] = useState([]);\r\n\r\n    //this function will allow us to send messages through socket server.\r\n    //this function is asynchronous so that we actually wait for the message to be sent\r\n    const sendMessage = async () => {\r\n        if(currentMessage !== \"\"){\r\n\r\n            // when we send a message ,we want several things with it,like the time, and the user who sent it,\r\n            // so this object messageData will store that.\r\n            // And we will send this object to our socket server\r\n            const messageData = {\r\n                room: room,\r\n                author: username,\r\n                message: currentMessage,\r\n                time: new Date(Date.now()).getHours() + \":\" + new Date(Date.now()).getMinutes(),\r\n            };\r\n\r\n            await socket.emit(\"send_message\", messageData);\r\n            setMessageList((list) => [...list, messageData]);\r\n            setCurrentMessage(\"\");\r\n        }\r\n    };\r\n\r\n    //useEffect will listen whenever there are changes to our socket,i.e.,it is going to listen every time it receives another message.\r\n    //the second parameter in useEffect is \"socket\", so whenever it changes it should call the fucntion in first parameter.\r\n    //this is the frontend listening to the backend\r\n    useEffect(() => {\r\n        socket.on(\"receive_message\", (data) => {\r\n            //the \"list\" in the parantheses is the previous current message list, and we are addding new message \"data\" to it\r\n            setMessageList((list) => [...list, data]);\r\n            \r\n        });\r\n        //this return statement is added so that the sent message is not displayed twice in the receivers box,it is a cleanup function.\r\n        return () => socket.removeListener('receive_message');\r\n    }, [socket]);\r\n\r\n    return (\r\n      <div className='chat-window'>\r\n          <div className='chat-header'>\r\n              <p>Live Chat</p>\r\n          </div>\r\n          <div className='chat-body'>\r\n            <ScrollToBottom className='message-container'>\r\n            {\r\n                messageList.map((messageContent) => {\r\n                    return (\r\n                    <div className='message' id={username === messageContent.author ? \"you\" : \"other\"}>\r\n                        <div>\r\n                            <div className='message-content'>\r\n                                <p>{messageContent.message}</p>\r\n                            </div>\r\n                            <div className='message-meta'>\r\n                                <p id=\"time\">{messageContent.time}</p>\r\n                                <p id=\"author\">{messageContent.author}</p>\r\n                            </div>\r\n                        </div>\r\n                    </div>);\r\n                })\r\n            }\r\n            </ScrollToBottom>\r\n          </div>\r\n          <div className='chat-footer'>\r\n              <input \r\n                type=\"text\" \r\n                value={currentMessage}\r\n                placeholder='Hey...'\r\n                onChange={(event) => {\r\n                    setCurrentMessage(event.target.value);\r\n                }}\r\n                onKeyPress={(event) => {\r\n                    event.key === \"Enter\" && sendMessage();\r\n                }}\r\n                ></input>\r\n              <button onClick={sendMessage}>&#9658;</button>\r\n          </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\nexport default Chat"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}